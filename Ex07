Files to turn in : ft_advanced_sort_string_tab.c
Allowed functions : None

• Create the function ft_advanced_sort_string_tab which sorts, depending on the
return of the function given as argument
• The sorting will be performed by exchanging the array’s pointers.
• tab will be null terminated
• Here’s how it should be prototyped :
void ft_advanced_sort_string_tab(char **tab, int(*cmp)(char *, char *));

Calling ft_advanced_sort_string_tab() with ft_strcmp as a second
argument will return the same result as ft_sort_string_tab().

Here's the code for the `ft_advanced_sort_string_tab` function:

```c
void ft_advanced_sort_string_tab(char **tab, int(*cmp)(char *, char *))
{
    int i;
    int j;
    char *temp;

    i = 0;
    while (tab[i + 1] != NULL)
    {
        j = 0;
        while (tab[j + 1] != NULL)
        {
            if (cmp(tab[j], tab[j + 1]) > 0)
            {
                temp = tab[j];
                tab[j] = tab[j + 1];
                tab[j + 1] = temp;
            }
            j++;
        }
        i++;
    }
}
```

The `ft_advanced_sort_string_tab` function takes an array of strings `tab` and a comparison function `cmp` as arguments. It performs a bubble sort algorithm on the array by comparing adjacent strings using the provided comparison function. If the result of the comparison is positive, the strings are swapped. This process is repeated until the array is sorted in ascending order based on the comparison function.

Please note that the comparison function `cmp` should have the following prototype: `int cmp(char *s1, char *s2)`. It should return a negative integer if `s1` is considered smaller than `s2`, 0 if they are considered equal, and a positive integer if `s1` is considered greater than `s2`. 

Remember to include the necessary header files and implement the comparison function appropriately for your specific sorting criteria.

Here's an example of test code for the `ft_advanced_sort_string_tab` function:

```c
#include <stdio.h>

int ft_strcmp(char *s1, char *s2)
{
    while (*s1 && (*s1 == *s2))
    {
        s1++;
        s2++;
    }
    return *(unsigned char*)s1 - *(unsigned char*)s2;
}

void ft_advanced_sort_string_tab(char **tab, int(*cmp)(char *, char *));

int main()
{
    char *tab[] = {"orange", "apple", "banana", "grape", "cherry", NULL};
    int i;

    printf("Before sorting:\n");
    for (i = 0; tab[i] != NULL; i++)
    {
        printf("%s\n", tab[i]);
    }

    ft_advanced_sort_string_tab(tab, &ft_strcmp);

    printf("\nAfter sorting:\n");
    for (i = 0; tab[i] != NULL; i++)
    {
        printf("%s\n", tab[i]);
    }

    return 0;
}
```

In this test code, we define an array of strings `tab` containing various fruits. We first print the array before sorting, then we call the `ft_advanced_sort_string_tab` function with the comparison function `ft_strcmp` to sort the array in ascending order. Finally, we print the sorted array.

Make sure to include the appropriate header files and implement the `ft_advanced_sort_string_tab` function correctly for it to work with the test code provided.
