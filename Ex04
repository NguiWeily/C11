Files to turn in : ft_is_sort.c
Allowed functions : None

• Create a function ft_is_sort which returns 1 if the array is sorted and 0 if it isn’t.
• The function given as argument should return a negative integer if the first argument
is lower than the second, 0 if they’re equal or a positive integer for anything else.
• Here’s how the function should be prototyped :
int ft_is_sort(int *tab, int length, int(*f)(int, int));

Here's the implementation of the `ft_is_sort` function:

```c
int ft_is_sort(int *tab, int length, int(*f)(int, int))
{
    int i;

    i = 0;
    while (i < length - 1)
    {
        if (f(tab[i], tab[i + 1]) > 0)
            return 0; // Not sorted
        i++;
    }
    return 1; // Sorted
}
```

The `ft_is_sort` function takes an array `tab` of integers, the length of the array `length`, and a function pointer `f` that compares two integers and returns a negative value if the first argument is lower, 0 if they are equal, or a positive value for anything else.

The function iterates through the array and compares each element with the next one using the provided comparison function `f`. If any comparison returns a positive value, it means the array is not sorted, and the function returns 0. If all comparisons return 0 or negative values, the array is sorted, and the function returns 1.

You can use this function to check if an array is sorted in either ascending or descending order by providing the appropriate comparison function to `ft_is_sort`.

Remember to include the necessary header files and function prototypes.

Certainly! Here's an example test program for the `ft_is_sort` function:

```c
#include <stdio.h>

int ascending_order(int a, int b)
{
    return a - b;
}

int descending_order(int a, int b)
{
    return b - a;
}

int main()
{
    int arr1[] = {1, 2, 3, 4, 5};
    int arr2[] = {5, 4, 3, 2, 1};
    int arr3[] = {1, 3, 2, 4, 5};

    int length1 = sizeof(arr1) / sizeof(arr1[0]);
    int length2 = sizeof(arr2) / sizeof(arr2[0]);
    int length3 = sizeof(arr3) / sizeof(arr3[0]);

    int sorted1 = ft_is_sort(arr1, length1, ascending_order);
    int sorted2 = ft_is_sort(arr2, length2, descending_order);
    int sorted3 = ft_is_sort(arr3, length3, ascending_order);

    printf("Array 1 is %s\n", sorted1 ? "sorted" : "not sorted");
    printf("Array 2 is %s\n", sorted2 ? "sorted" : "not sorted");
    printf("Array 3 is %s\n", sorted3 ? "sorted" : "not sorted");

    return 0;
}
```

In this test program, we define three arrays: `arr1`, `arr2`, and `arr3`. We also calculate the length of each array using the `sizeof` operator.

We then call the `ft_is_sort` function on each array, providing the appropriate comparison function (`ascending_order` or `descending_order`). The return value is stored in the `sorted1`, `sorted2`, and `sorted3` variables.

Finally, we print whether each array is sorted or not based on the return values.

Remember to include the necessary header files and function prototypes for `ft_is_sort` and the comparison functions.
